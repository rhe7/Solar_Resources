
$set PATH C:\Users\hp15\Desktop\
$oneolcom
OPTION ITERLIM=10000;
OPTION RESLIM = 500000;


set
t /3625*3793/!!/3625*6552/!!/3688*3711/ !!change it to 8760 at the end
hour /1*24/
day /1*365/
month /1*12/
year /2016*2020/
m material
s surface
time_map(t,hour,day,month)
;

parameters

solar_data(t,*) Contains information about positioning and brightness of sun
material_data(m,*)
building_envelope(s,*)
demand_data(t,*)
area_min(s,m) [m^2]
area_max(s,m) [m^2]
S_module(s,t) [kW per m^2]
delta_t in hours /1/
eta_L Conversion efficiency of electric power to light energy [kWh per kWh] (LED) /0.20/ !!/0.042/
eta_S Conversion efficiency of sunlight into light in house [kWh per kWh] /0.95/
m_w Mass of water tank [kg] /450/
c_w Thermal capacity of water tank [kWh per K per kg] (check it out) /0.00116/
eta_st Conversion efficiency between sunlight to heat in water tank (most common)/0.15/
eta_w Efficiency of the heating coils /0.99/
A_w Area of water tank [m^2] /3.85/
R_w Thermal insulance of water tank [m^2*K per kW] /49489/
P_w_max Maximum water heater input power [kW] /22/
T_inlet temperature of water inlet [C] /10/
vent_rate air changes per hour /1.5/!!/0.35/

m_h air mass of house[kg] /368/
c_h Thermal capacity of air in house [kWh per K per kg] /0.000199/


eta_heat Conversion efficiency of heating unit [kWh per kWh] /0.8/
eta_cool Conversion efficiency of the cooling unit [kWh per kWh] /2/
P_h_heat_max Rated power of heater [kW] /11.72/
P_h_cool_max Rated power of air conditioning [kW] /3.517/
eta_PV Conversion efficiency of of sunlight into solar power [kW per kW] /0.15/
P_in_max Maximum input power from grid [kW] /100/!!/100000/
P_out_max Maximum output power to the grid [kW] /100/!!/100000/
gamma Conversion between investments and operations *NPV* /214.268/
*  !!/3.9927/ for the entire year     !!/214.268/ for 1 week          Always assume 8% interest rate

hpenalty(t)
penalty cost in $ per C under for water /.75/
npenalty /.25/
water_temp_target /65/
house_temp_target /22.5/
;


$onecho > taskin.txt
Dset=s rng=building_envelope!a1:a100 rdim=1 cdim=0
set=time_map rng=time_map!a1:d8761 RDim=4 CDim=0
par=solar_data rng=solar_data!a1:d8761 rdim=1 cdim=1
Dset=m rng=material_data!a2:a100 cdim=0 rdim=1
par=material_data rng=material_data!a1:c100 cdim=1 rdim=1
par=building_envelope rng=building_envelope!a1:d6 rdim=1 cdim=1
par=demand_data rng=demand_data!a1:h8761 rdim=1 cdim=1
par=area_min rng=building_envelope!g1:k6 rdim=1 cdim=1
par=area_max rng=building_envelope!g8:k13 rdim=1 cdim=1
$offecho

$Call GDXXRW %PATH%InputDatatest.xlsx @taskin.txt
$GDXIN InputDatatest.gdx
$LOAD s time_map solar_data m material_data building_envelope demand_data area_min area_max
$GDXIN

display m,s,solar_data, material_data, time_map, building_envelope;

hpenalty(t)$(Demand_data(t,'Occupied') eq 0)  = 0;   !!adjust penalty factors as needed
hpenalty(t)$(Demand_data(t,'Occupied') eq 1) = 0.75;

s_module(s,t) = solar_data(t,'s_incidence')*( cos(solar_data(t,'elevation'))*sin(building_envelope(s,'tilt'))*cos( (building_envelope(s,'azimuth')-solar_data(t,'azimuth')) ) + sin(solar_data(t,'elevation'))*cos(building_envelope(s,'tilt')) ); !! METSTAT DATA fixed parens
s_module(s,t)$(s_module(s,t) lt 0) = 0;

Variables
Cost
T_w(t) Temperature of the hot water tank [K]
T_h(t) Temperature of the house [K]
;

Positive variables
Area(s,m) Surface area of each material [m^2]
s_L(t) ***slack variable for lighting [kW]
P_L(t) power used for lighting home [kW]
P_w(t) Power input into hot water tank [kW]
P_h_heat(t) Power input to heat house [kW]
P_h_cool(t) Power input to cool house [kW]
P_PV(t) Power generated by solar panels [kW]
P_in(t) Power from the grid [kW]
P_out(t) Power to the grid [kW]

T_w_over(t)
T_w_under(t)
NeutralZone_h_pos(t)
NeutralZone_h_neg(t)
NeutralZone_w_pos(t)
NeutralZone_w_neg(t)
T_h_over(t)
T_h_under(t)
;


P_h_heat.up(t) = p_h_heat_max;
P_h_cool.up(t) = P_h_cool_max;
P_in.up(t) = P_in_max;
P_out.up(t) = P_out_max;
area.lo(s,m) = area_min(s,m);
area.up(s,m) = area_max(s,m);
P_w.up(t) = P_w_max;

s_L.up(t) = demand_data(t,'light');
*"what's the maximum amount of light we can curtail?"

NeutralZone_h_neg.up(t) = 4;
NeutralZone_h_pos.up(t) = 4;
NeutralZone_w_pos.up(t) = 1;    !!testing
NeutralZone_w_neg.up(t) = 1;

Equations
Obj
Eq_Area(s)
Eq_light_demand(t)
Eq_HW_demand(t)
Eq_heating_q(t)
Eq_PV(t)
Eq_power(t)
HousePenaltyFunction
Eq_w_penalty(t)
Eq_w_over(t)
Eq_w_under(t)
Eq_h_over(t)
Eq_h_under(t)
Eq_house_pen(t)
Eq_water_pen(t)

;

Obj.. Cost =e= sum( (s,m), Area(s,m)*material_data(m,'Cost') ) + gamma*sum( t, demand_data(t,'power_price_buy')*P_in(t) - demand_data(t,'power_price_sell')*P_out(t))  + gamma*sum(t,s_L(t)) + gamma*sum(t, penalty*Demand_data(t,'water')*c_w/.0404*T_w_over(t)) + gamma*sum(t, penalty*Demand_data(t,'water')*c_w/.0404*T_w_under(t)) + gamma*sum(t,hpenalty(t)*T_h_under(t)) + gamma*sum(t,hpenalty(t)*T_h_over(t)) + gamma*sum(t,npenalty*NeutralZone_h_pos(t)) + gamma*sum(t,npenalty*NeutralZone_w_neg(t))  + gamma*sum(t,npenalty*Demand_data(t,'water')*c_w/.0404*NeutralZone_w_pos(t)) + gamma*sum(t,npenalty*Demand_data(t,'water')*c_w/.0404*NeutralZone_w_neg(t));

Eq_water_pen(t).. T_w(t) =e= T_w_over(t) - T_w_under(t) + water_temp_target + neutralzone_w_pos(t) - neutralzone_w_neg(t);
Eq_house_pen(t).. T_h(t) =e= T_h_over(t) - T_h_under(t) + house_temp_target + neutralzone_h_pos(t) - neutralzone_h_neg(t);

Eq_Area(s).. building_envelope(s,'area') =e= sum( m, area(s,m));

*Lighting equations
Eq_light_demand(t).. demand_data(t,'light') - delta_t*eta_L*P_L(t) + s_L(t) =l= delta_t*eta_s*sum(s,s_module(s,t)*Area(s,'WI'));

*Hot water tank equations
Eq_HW_demand(t).. m_w*c_w*(T_w(t) - T_w(t++1)) + delta_t*eta_st*sum(s,s_module(s,t)*Area(s,'ST')) + delta_t*eta_w*P_w(t)  - Demand_data(t,'water') - delta_t*A_w/R_w*(T_w(t)-T_h(t))=e= 0;

*Space heating equations
eq_Heating_q(t).. 0 =e= Delta_t*m_h*c_h*(T_h(t) - T_h(t++1)) + eta_Heat*delta_t*P_h_heat(t) - eta_Cool*Delta_t*P_h_cool(t) + (demand_data(t,'temperature') - T_h(t))*Delta_t*sum((s,m), area(s,m)/Material_data(m,'R')) +(Delta_t*vent_rate)*m_h*c_h*(demand_data(t,'temperature') - T_h(t));

*PV generation
EQ_PV(t) .. P_PV(t) =e= sum(s, delta_t*s_module(s,t)*eta_PV*area(s,'PV'));

*consumption tracking
EQ_power(t) .. P_in(t) - P_out(t) =e= P_L(t) + P_w(t) + P_h_heat(t) + P_h_cool(t) + Demand_data(t,'power') - P_PV(t);

Model PVTESTQcp /Obj,Eq_Area, Eq_Light_Demand, Eq_HW_demand, eq_Heating_q, EQ_PV, EQ_power, Eq_house_pen, Eq_water_pen/;

Solve PVTESTQcp using qcp minimizing Cost;
Display Cost.l;
Display PVTESTQcp.etSolve;



EXECUTE_UNLOAD 'Output' area
execute 'GDXXRW Output.GDX var=area.l rng=area!a1:g100 cdim=1 rdim=1';
